@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="d-flex flex-column min-vh-100" style="font-family: 'Segoe UI', sans-serif;">
    <div class="d-flex flex-grow-1">
        <!-- Sidebar -->
        <NavMenu />

        <!-- Main Content -->
        <main class="flex-grow-1 bg-light d-flex flex-column">
            <!-- Top bar -->
            <div class="bg-white d-flex justify-content-between align-items-center px-4 py-3 shadow-sm border-bottom">
                <h5 class="m-0 text-primary">@PageTitle</h5>
                <div>
                    @if (string.IsNullOrEmpty(userEmail))
                    {
                        <NavLink class="btn btn-sm btn-outline-primary" href="login">
                            <i class="bi bi-box-arrow-in-right"></i> Login
                        </NavLink>
                    }
                    else
                    {
                        <span class="me-3 text-muted flex">👋 Welcome, <strong>@userEmail</strong></span>
                        <button class="btn btn-sm btn-outline-danger" @onclick="Logout">
                            <i class="bi bi-box-arrow-right"></i> Logout
                        </button>
                    }
                </div>
            </div>

            <!-- Page content -->
            <article class="p-4 flex-grow-1 overflow-auto">
                @Body
            </article>

            <!-- Footer -->
            <footer class="bg-white text-muted text-center py-2 border-top small">
                @if (!string.IsNullOrEmpty(userRole))
                {
                    <span>You are logged in as <strong>@userRole</strong>.</span>
                }
                else
                {
                    <span>Not logged in.</span>
                }
            </footer>
        </main>
    </div>
</div>

<style>
    main {
        transition: margin-left 0.3s ease;
        min-height: 100vh;
    }

    @@media (min-width: 768px) {
        main {
            margin-left: 250px;
        }

            main.collapsed {
                margin-left: 70px;
            }
    }
</style>

@code {
    private string? userEmail;
    private string? userRole;
    private string PageTitle = "";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateUserEmailAsync();
        UpdatePageTitle();
        Navigation.LocationChanged += OnLocationChanged;
    }

    private static readonly Dictionary<string, string> RouteTitles = new()
{
    { "", "Vendor List" },
    { "vendor/", "Vendor Details" },
    { "order/", "Place Order" },
    { "orders", "Order History" },
    { "inquiry/", "Send Inquiry" },
    { "inquiries", "Inquiry List" },
    { "about/", "About Vendor" },
    { "login", "Login" },
    { "register", "Register" },
    { "profile", "User Profile" },
    { "admin", "Admin Panel" },
    { "settings", "Settings" },
    { "reports", "Reports" },
    { "support", "Support" },
};

    private void UpdatePageTitle()
    {
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri).ToLowerInvariant();

        PageTitle = ""; // default

        foreach (var prefix in RouteTitles.Keys)
        {
            if (relativePath.StartsWith(prefix))
            {
                PageTitle = RouteTitles[prefix];
                break;
            }
        }

        StateHasChanged();
    }


    private async Task UpdateUserEmailAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userEmail = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value
                        ?? user.Identity.Name;

            var roleClaim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Role);
            userRole = roleClaim?.Value ?? "Unknown";
        }
        else
        {
            userEmail = null;
            userRole = null;
        }

        StateHasChanged();
    }

    private async Task Logout()
    {
        try { await Http.PostAsync("api/auth/logout", null); } catch { }

        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        await JS.InvokeVoidAsync("localStorage.removeItem", "userEmail");
        await JS.InvokeVoidAsync("localStorage.removeItem", "userRole");
        await JS.InvokeVoidAsync("localStorage.removeItem", "vendorID");

        ((ApiAuthenticationStateProvider)AuthenticationStateProvider).NotifyUserLogout();
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserEmailAsync();
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdatePageTitle();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
