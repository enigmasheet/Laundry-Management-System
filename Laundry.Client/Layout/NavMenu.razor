@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Laundry.Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu" aria-expanded="@(!collapseNavMenu)" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        @if (string.IsNullOrEmpty(userEmail))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <span class="nav-link disabled">Welcome, @userEmail</span>
            </div>
            <div class="nav-item px-3">
                <a class="nav-link" style="cursor:pointer" @onclick="Logout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                </a>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string? userEmail;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateUserEmailAsync();
    }

    private async Task UpdateUserEmailAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Try to get email claim or fallback to Name
            userEmail = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value
                        ?? user.Identity.Name;
        }
        else
        {
            userEmail = null;
        }

        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        try
        {
            // Call server-side logout to remove HttpOnly cookie
            await Http.PostAsync("api/auth/logout", null);
        }
        catch
        {
            // Even if server call fails, continue cleanup
        }

        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        await JS.InvokeVoidAsync("localStorage.removeItem", "userEmail");
        await JS.InvokeVoidAsync("localStorage.removeItem", "userRole");
        await JS.InvokeVoidAsync("localStorage.removeItem", "vendorID");

        ((ApiAuthenticationStateProvider)AuthenticationStateProvider).NotifyUserLogout();

        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserEmailAsync();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
