@page "/order/{id:int?}"
@attribute [Authorize(Roles = "SuperAdmin,VendorAdmin,Customer,Employee")]
@using Laundry.Client.Services
@using Laundry.Shared.DTOs
@using Laundry.Shared.Enums
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IVendorService VendorService

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="text-center mb-4">@((isCustomerRole) ? "Place Your Order" : "Create or Edit Order")</h3>

    <div class="row g-3">
        <p><strong>Order Code:</strong> @order.OrderCode</p>
        <div class="col-md-6">
            <label class="form-label">Customer Phone</label>
            @if (isCustomerRole)
            {
                <InputText @bind-Value="CustomerPhoneString" class="form-control" readonly />
            }
            else
            {
                <InputText @bind-Value="CustomerPhoneString" class="form-control" />
            }
        </div>

        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            @if (isVendorRole)
            {
                <div class="form-control-plaintext fw-semibold">
                    @SelectedVendorName
                </div>
            }
            else
            {
                <InputSelect @bind-Value="order.VendorId" class="form-control" @onchange="VendorChanged">
                    <option value="">-- Select Vendor --</option>
                    @if (vendors == null || vendors.Count == 0)
                    {
                        <option disabled>Loading vendors...</option>
                    }
                    else
                    {
                        @foreach (var vendor in vendors)
                        {
                            <option value="@vendor.Id">@vendor.Name</option>
                        }
                    }
                </InputSelect>
            }
        </div>


        <div class="col-md-4">
            <label class="form-label">Pickup Date</label>
            <InputDate @bind-Value="order.PickupDate" class="form-control" @onchange="PickupDateChanged" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Delivery Date</label>
            <InputDate @bind-Value="order.DeliveryDate" class="form-control" />
        </div>

        @if (!isCustomerRole)
        {
            <div class="col-md-12">
                <label class="form-label">Status</label>
                <InputSelect @bind-Value="order.Status" class="form-control">
                    @foreach (var status in Enum.GetValues<OrderStatus>())
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>
        }
    </div>

    <h4 class="mt-4">Order Items</h4>

    @foreach (var item in order.OrderItems)
    {
        <div class="border p-3 mb-3 rounded shadow-sm bg-light">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Service ID</label>
                    <InputNumber @bind-Value="item.ServiceId" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Quantity (Kg)</label>
                    <InputNumber @bind-Value="item.QuantityKg" class="form-control" @oninput="RecalculateTotal" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Unit Price</label>
                    <InputNumber @bind-Value="item.UnitPrice" class="form-control" @oninput="RecalculateTotal" />
                </div>

                <div class="col-md-6 mt-2">
                    <label class="form-label">Total Price</label>
                    <div class="form-control-plaintext fw-bold">@item.TotalPrice:C</div>
                </div>

                
                    <div class="col-md-6 mt-4 text-end">
                        <button type="button" class="btn btn-danger" @onclick="() => RemoveOrderItem(item)">Remove</button>
                    </div>
                
            </div>
        </div>
    }

    
        <button type="button" class="btn btn-outline-secondary mb-3" @onclick="AddOrderItem">+ Add Item</button>
 

    <div class="mb-4">
        <strong>Total Amount:</strong>
        <span class="ms-2 fw-bold text-primary">@order.TotalAmount:C</span>
    </div>

    <div class="text-center">
        <button type="submit" class="btn btn-primary px-4">Submit Order</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private OrderDto order = new();
    private bool isCustomerRole = false;
    private bool isVendorRole = false;
    private List<VendorDto> vendors = new();

    private string CustomerPhoneString
    {
        get => order.CustomerPhone ?? "";
        set => order.CustomerPhone = value;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isCustomerRole = user.IsInRole("Customer");
        isVendorRole = user.IsInRole("VendorAdmin") || user.IsInRole("Employee");

        // Auto-fill customer phone
        if (user.Identity?.IsAuthenticated == true && isCustomerRole)
        {
            var phoneClaim = user.FindFirst(c => c.Type == "phone_number" || c.Type == "phone")?.Value;
            if (!string.IsNullOrWhiteSpace(phoneClaim))
            {
                order.CustomerPhone = phoneClaim;
            }
        }

        var vendorId = GetVendorIdFromClaims(user);

        // Fetch vendors list
        if (isVendorRole && vendorId.HasValue)
        {
            var vendor = await VendorService.GetVendorByIdAsync(vendorId.Value);
            if (vendor != null)
            {
                vendors = new List<VendorDto> { vendor };
                if (!Id.HasValue)
                {
                    order.VendorId = vendor.Id;
                }
            }
        }
        else
        {
            vendors = await VendorService.GetAllVendorsAsync();
        }

        if (Id.HasValue)
        {
            order.Id = Id.Value;
            // TODO: Fetch order details by Id if needed
        }
        else
        {
            InitializeNewOrder();
        }
    }

    private string SelectedVendorName =>
        vendors.FirstOrDefault(v => v.Id == order.VendorId)?.Name ?? "Unknown Vendor";

    private int? GetVendorIdFromClaims(ClaimsPrincipal user)
    {
        var vendorIdClaim = user.FindFirst(c => c.Type == "vendorId");
        if (vendorIdClaim != null && int.TryParse(vendorIdClaim.Value, out int vendorId))
        {
            return vendorId;
        }
        return null;
    }

    private void InitializeNewOrder()
    {
        if (order.Id != 0) return;

        order.Id = 1;
        if (order.VendorId == 0 && vendors.Count == 1)
        {
            order.VendorId = vendors[0].Id;
        }

        order.CreatedAt = DateTime.Now;
        order.PickupDate = DateTime.Today;
        order.DeliveryDate = DateTime.Today.AddDays(2);
        order.Status = OrderStatus.Pending;
        order.OrderItems = new List<OrderItemDto>
        {
            new()
            {
                Id = 1,
                OrderId = 1,
                ServiceId = 101,
                QuantityKg = 1.0,
                UnitPrice = 10.0m
            }
        };

        RecalculateTotal();
    }

    private Task PickupDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newPickup))
        {
            order.PickupDate = newPickup;
            order.DeliveryDate = newPickup.AddDays(2);
        }
        return Task.CompletedTask;
    }

    private void AddOrderItem()
    {
        var newItem = new OrderItemDto
        {
            Id = order.OrderItems.Count + 1,
            OrderId = order.Id,
            ServiceId = 0,
            QuantityKg = 1.0,
            UnitPrice = 0.0m
        };
        order.OrderItems.Add(newItem);
        RecalculateTotal();
    }

    private void RemoveOrderItem(OrderItemDto item)
    {
        order.OrderItems.Remove(item);
        RecalculateTotal();
    }

    private void RecalculateTotal()
    {
        foreach (var i in order.OrderItems)
        {
            i.TotalPrice = (decimal)i.QuantityKg * i.UnitPrice;
        }
        order.TotalAmount = order.OrderItems.Sum(i => i.TotalPrice);
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine($"Order submitted. Customer Phone: {order.CustomerPhone}, Total: {order.TotalAmount}");
        // TODO: Submit to backend API
    }

    private void VendorChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedVendorId))
        {
            order.VendorId = selectedVendorId;
        }
    }
}
