@page "/order/{id:int?}"
@attribute [Authorize(Roles = "SuperAdmin,VendorAdmin,Customer,Employee")]

@using Laundry.Client.Services
@using Laundry.Shared
@using Laundry.Shared.DTOs
@using Laundry.Shared.Enums
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IVendorService VendorService

<EditForm Model="@order" OnValidSubmit="ShowConfirmModal">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="text-center mb-4">@FormTitle</h3>

    <div class="row g-3">

        <!-- Customer Phone -->
        <div class="col-md-6">
            <label class="form-label">Customer Phone</label>
            @if (isCustomerRole)
            {
                <InputText @bind-Value="order.CustomerPhone" class="form-control" readonly />
            }
            else
            {
                <InputText @bind-Value="order.CustomerPhone" class="form-control" />
            }
        </div>

        <!-- Vendor -->
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            @if (VendorIdFromQuery.HasValue && !allowVendorChange)
            {
                <div class="form-control-plaintext fw-semibold">@SelectedVendorName</div>
                <div class="form-check mt-2">
                    <input type="checkbox" class="form-check-input" id="changeVendor" @bind="allowVendorChange" />
                    <label class="form-check-label" for="changeVendor">Change Vendor</label>
                </div>
            }
            else
            {
                <InputSelect @bind-Value="order.VendorId" class="form-control">
                    <option value="">-- Select Vendor --</option>
                    @if (vendors == null || vendors.Count == 0)
                    {
                        <option disabled>Loading vendors...</option>
                    }
                    else
                    {
                        @foreach (var vendor in vendors)
                        {
                            <option value="@vendor.Id">@vendor.Name</option>
                        }
                    }
                </InputSelect>

                @if (VendorIdFromQuery.HasValue)
                {
                    <div class="form-check mt-2">
                        <input type="checkbox" class="form-check-input" id="resetVendor" @bind="resetVendorChecked" />
                        <label class="form-check-label" for="resetVendor">Reset to Original Vendor</label>
                    </div>
                }
            }
        </div>

        <!-- Pickup Type -->
        <div class="col-md-4">
            <label class="form-label">Pickup Type</label>
            <InputSelect @bind-Value="order.PickupType" class="form-control" @onchange="OnPickupTypeChanged">
                @foreach (PickupTypeEnum pt in Enum.GetValues(typeof(PickupTypeEnum)))
                {
                    <option value="@pt">@pt.GetDisplayName()</option>
                }
            </InputSelect>
        </div>

        <!-- Pickup Date -->
        <div class="col-md-4">
            <label class="form-label">@PickupDateLabel</label>
            <InputDate @bind-Value="CurrentPickupDate" class="form-control" />
        </div>

        <!-- Delivery Type -->
        <div class="col-md-4">
            <label class="form-label">Delivery Type</label>
            <InputSelect @bind-Value="order.DeliveryType" class="form-control" @onchange="OnDeliveryTypeChanged">
                @foreach (DeliveryTypeEnum dt in Enum.GetValues(typeof(DeliveryTypeEnum)))
                {
                    <option value="@dt">@dt.GetDisplayName()</option>
                }
            </InputSelect>
        </div>

        <!-- Delivery Date -->
        <div class="col-md-4">
            <label class="form-label">@DeliveryDateLabel</label>
            <InputDate @bind-Value="CurrentDeliveryDate" class="form-control" />
        </div>

        <!-- Updated At (read-only) -->
        <div class="col-md-4">
            <label class="form-label">Updated At</label>
            <InputDate @bind-Value="order.UpdatedAt" class="form-control" disabled />
        </div>

        @if (!isCustomerRole)
        {
            <!-- Status -->
            <div class="col-md-12">
                <label class="form-label">Status</label>
                <InputSelect @bind-Value="order.Status" class="form-control">
                    @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
                    {
                        <option value="@status">@status.GetDisplayName()</option>
                    }
                </InputSelect>
            </div>
        }

        <!-- Special Instructions -->
        <div class="col-md-12">
            <label class="form-label">Special Instructions</label>
            <InputTextArea @bind-Value="order.SpecialInstructions" class="form-control" maxlength="500" rows="3" />
        </div>
    </div>

    <h4 class="mt-4">Order Items</h4>

    @foreach (var item in order.OrderItems)
    {
        <div class="border p-3 mb-3 rounded shadow-sm bg-light">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Service ID</label>
                    <InputNumber @bind-Value="item.ServiceId" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Quantity (Kg)</label>
                    <InputNumber @bind-Value="item.QuantityKg" class="form-control" @oninput="RecalculateTotal" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Unit Price</label>
                    <InputNumber @bind-Value="item.UnitPrice" class="form-control" @oninput="RecalculateTotal" />
                </div>

                <div class="col-md-6 mt-2">
                    <label class="form-label">Total Price</label>
                    <div class="form-control-plaintext fw-bold">@item.TotalPrice</div>
                </div>

                <div class="col-md-6 mt-4 text-end">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveOrderItem(item)">Remove</button>
                </div>
            </div>
        </div>
    }

    <button type="button" class="btn btn-outline-secondary mb-3" @onclick="AddOrderItem">+ Add Item</button>

    <div class="mb-4">
        <strong>Total Amount:</strong>
        <span class="ms-2 fw-bold text-primary">@order.TotalAmount</span>
    </div>

    <div class="mb-4">
        <strong>Final Amount:</strong>
        <span class="ms-2 fw-bold text-success">@order.FinalAmount</span>
    </div>

    <div class="text-center">
        <button type="submit" class="btn btn-primary px-4">Submit Order</button>
    </div>
</EditForm>

@if (showConfirmModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Confirm Order Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmModal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <p><strong>Order Code:</strong> @order.OrderCode</p>
                    <p><strong>Customer Phone:</strong> @order.CustomerPhone</p>
                    <p><strong>Vendor:</strong> @SelectedVendorName</p>
                    <p><strong>@PickupDateLabel:</strong> @(CurrentPickupDate?.ToShortDateString() ?? "N/A")</p>
                    <p><strong>@DeliveryDateLabel:</strong> @(CurrentDeliveryDate?.ToShortDateString() ?? "N/A")</p>
                    <p><strong>Status:</strong> @order.Status.GetDisplayName()</p>
                    <p><strong>Special Instructions:</strong> @order.SpecialInstructions</p>

                    <h6 class="mt-4">Order Items:</h6>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Service ID</th>
                                <th>Quantity (Kg)</th>
                                <th>Unit Price</th>
                                <th>Total Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in order.OrderItems)
                            {
                                <tr>
                                    <td>@item.ServiceId</td>
                                    <td>@item.QuantityKg</td>
                                    <td>@item.UnitPrice</td>
                                    <td>@item.TotalPrice</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <p class="fw-bold"><strong>Total Amount:</strong> @order.TotalAmount</p>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseConfirmModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SubmitOrder">Confirm</button>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }
    [SupplyParameterFromQuery(Name = "vendorId")] public int? VendorIdFromQuery { get; set; }

    private OrderDto order = new();
    private List<VendorDto> vendors = new();

    private bool isCustomerRole;
    private bool isVendorRole;
    private bool allowVendorChange;
    private bool resetVendorChecked;
    private int? originalVendorId;
    private bool showConfirmModal;

    private string FormTitle => isCustomerRole ? "Place Your Order" : "Create or Edit Order";

    private string PickupDateLabel => order.PickupType switch
    {
        PickupTypeEnum.HomePickup => "Pickup Date",
        PickupTypeEnum.DropOff => "Drop-off Date",
        _ => "Pickup Date"
    };

    private DateTime? CurrentPickupDate
    {
        get => order.PickupType switch
        {
            PickupTypeEnum.HomePickup => order.PickupDate,
            PickupTypeEnum.DropOff => order.DropOffDate,
            _ => null
        };
        set
        {
            switch (order.PickupType)
            {
                case PickupTypeEnum.HomePickup:
                    order.PickupDate = value;
                    break;
                case PickupTypeEnum.DropOff:
                    order.DropOffDate = value;
                    break;
            }
        }
    }

    private string DeliveryDateLabel => order.DeliveryType switch
    {
        DeliveryTypeEnum.HomeDelivery => "Delivery Date",
        DeliveryTypeEnum.StoreCollect => "Store Collect Date",
        _ => "Delivery Date"
    };

    private DateTime? CurrentDeliveryDate
    {
        get => order.DeliveryType switch
        {
            DeliveryTypeEnum.HomeDelivery => order.DeliveryDate,
            DeliveryTypeEnum.StoreCollect => order.ExpectedReadyDate,
            _ => null
        };
        set
        {
            switch (order.DeliveryType)
            {
                case DeliveryTypeEnum.HomeDelivery:
                    order.DeliveryDate = value;
                    break;
                case DeliveryTypeEnum.StoreCollect:
                    order.ExpectedReadyDate = value;
                    break;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isCustomerRole = user.IsInRole("Customer");
        isVendorRole = user.IsInRole("VendorAdmin") || user.IsInRole("Employee");

        if (isCustomerRole && user.Identity?.IsAuthenticated == true)
        {
            var phoneClaim = user.FindFirst(c => c.Type == "phone_number" || c.Type == "phone")?.Value;
            if (!string.IsNullOrWhiteSpace(phoneClaim))
                order.CustomerPhone = phoneClaim;
        }

        if (VendorIdFromQuery.HasValue)
        {
            order.VendorId = VendorIdFromQuery.Value;
            originalVendorId = VendorIdFromQuery.Value;
        }

        if (isVendorRole)
            await LoadVendorForUserAsync(user);
        else
            vendors = await VendorService.GetAllVendorsAsync();

        if (Id.HasValue)
        {
            order.Id = Id.Value;
            // TODO: Load order details by Id here
        }
        else
        {
            InitializeNewOrder();
        }
    }

    private async Task LoadVendorForUserAsync(System.Security.Claims.ClaimsPrincipal user)
    {
        var vendorId = GetVendorIdFromClaims(user);
        if (vendorId.HasValue)
        {
            var vendor = await VendorService.GetVendorByIdAsync(vendorId.Value);
            if (vendor is not null)
            {
                vendors = new List<VendorDto> { vendor };
                if (!Id.HasValue)
                    order.VendorId = vendor.Id;
            }
        }
    }

    private int? GetVendorIdFromClaims(System.Security.Claims.ClaimsPrincipal user)
        => int.TryParse(user.FindFirst(c => c.Type == "vendorId")?.Value, out var id) ? id : null;

    private void InitializeNewOrder()
    {
        if (order.Id != 0) return;

        order.Id = 1; // Consider generating Id properly later
        order.CreatedAt = DateTime.Now;
        order.Status = OrderStatus.Pending;

        if (VendorIdFromQuery.HasValue)
            order.VendorId = VendorIdFromQuery.Value;
        else if (order.VendorId == 0 && vendors.Count == 1)
            order.VendorId = vendors[0].Id;

        order.PickupDate ??= DateTime.Today;
        order.DropOffDate ??= DateTime.Today.AddDays(1);
        order.DeliveryDate ??= DateTime.Today.AddDays(2);
        order.ExpectedReadyDate ??= DateTime.Today.AddDays(3);

        order.OrderItems = new List<OrderItemDto>
        {
            new() { Id = 1, OrderId = order.Id, ServiceId = 101, QuantityKg = 1.0, UnitPrice = 10.0m }
        };

        RecalculateTotal();
    }

    private void OnPickupTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<PickupTypeEnum>(e.Value?.ToString(), out var selectedType))
        {
            order.PickupType = selectedType;

            switch (selectedType)
            {
                case PickupTypeEnum.HomePickup when !order.PickupDate.HasValue:
                    order.PickupDate = DateTime.Today;
                    break;
                case PickupTypeEnum.DropOff when !order.DropOffDate.HasValue:
                    order.DropOffDate = DateTime.Today.AddDays(1);
                    break;
            }
        }
    }

    private void OnDeliveryTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<DeliveryTypeEnum>(e.Value?.ToString(), out var selectedType))
        {
            order.DeliveryType = selectedType;

            switch (selectedType)
            {
                case DeliveryTypeEnum.HomeDelivery when !order.DeliveryDate.HasValue:
                    order.DeliveryDate = DateTime.Today.AddDays(2);
                    break;
                case DeliveryTypeEnum.StoreCollect when !order.ExpectedReadyDate.HasValue:
                    order.ExpectedReadyDate = DateTime.Today.AddDays(3);
                    break;
            }
        }
    }

    private void AddOrderItem()
    {
        order.OrderItems.Add(new OrderItemDto
        {
            Id = order.OrderItems.Count + 1,
            OrderId = order.Id,
            ServiceId = 0,
            QuantityKg = 1.0,
            UnitPrice = 0.0m
        });
        RecalculateTotal();
    }

    private void RemoveOrderItem(OrderItemDto item)
    {
        order.OrderItems.Remove(item);
        RecalculateTotal();
    }

    private void RecalculateTotal()
    {
        foreach (var item in order.OrderItems)
            item.TotalPrice = (decimal)item.QuantityKg * item.UnitPrice;

        order.TotalAmount = order.OrderItems.Sum(i => i.TotalPrice);

        // Update FinalAmount here if needed

        StateHasChanged();
    }

    private void ShowConfirmModal() => showConfirmModal = true;

    private void CloseConfirmModal() => showConfirmModal = false;

    private void SubmitOrder()
    {
        showConfirmModal = false;
        order.UpdatedAt = DateTime.UtcNow;

        // TODO: Call API to save order

        Console.WriteLine($"Order submitted. Customer Phone: {order.CustomerPhone}, Total: {order.TotalAmount:C}");
        // TODO: Navigate or show success notification
    }

    private string SelectedVendorName => vendors.FirstOrDefault(v => v.Id == order.VendorId)?.Name ?? "Unknown Vendor";

    // Reset vendor checkbox binding using property with side effect
    private bool ResetVendorChecked
    {
        get => resetVendorChecked;
        set
        {
            if (value && originalVendorId.HasValue)
            {
                order.VendorId = originalVendorId.Value;
                allowVendorChange = false;
                resetVendorChecked = false; // reset checkbox
                StateHasChanged();
            }
            else
            {
                resetVendorChecked = value;
            }
        }
    }
}
