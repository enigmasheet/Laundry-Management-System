@page "/order"
@attribute [Authorize(Roles = "SuperAdmin,VendorAdmin,Customer,Employee")]
@using Laundry.Shared.DTOs
@using Laundry.Shared.Enums
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3 class="text-center mb-4">Create Order</h3>

    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Customer Phone</label>
            @if (isCustomerRole)
            {
                <InputText @bind-Value="CustomerPhoneString" class="form-control" readonly />
            }
            else
            {
                <InputText @bind-Value="CustomerPhoneString" class="form-control" />
            }
        </div>

        <div class="col-md-6">
            <label class="form-label">Vendor ID</label>
            <InputNumber @bind-Value="order.VendorId" class="form-control" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Created At</label>
            <InputDate @bind-Value="order.CreatedAt" class="form-control" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Pickup Date</label>
            <InputDate @bind-Value="order.PickupDate" class="form-control" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Delivery Date</label>
            <InputDate @bind-Value="order.DeliveryDate" class="form-control" />
        </div>

        <div class="col-md-12">
            <label class="form-label">Status</label>
            <InputSelect @bind-Value="order.Status" class="form-control">
                @foreach (var status in Enum.GetValues<OrderStatus>())
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
    </div>

    <h4 class="mt-4">Order Items</h4>

    @foreach (var item in order.OrderItems)
    {
        <div class="border p-3 mb-3 rounded shadow-sm bg-light">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Service ID</label>
                    <InputNumber @bind-Value="item.ServiceId" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Quantity (Kg)</label>
                    <InputNumber @bind-Value="item.QuantityKg" class="form-control" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Unit Price</label>
                    <InputNumber @bind-Value="item.UnitPrice" class="form-control" />
                </div>

                <div class="col-md-6 mt-2">
                    <label class="form-label">Total Price</label>
                    <div class="form-control-plaintext fw-bold">@item.TotalPrice:C</div>
                </div>

                <div class="col-md-6 mt-4 text-end">
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveOrderItem(item)">Remove</button>
                </div>
            </div>
        </div>
    }

    <button type="button" class="btn btn-outline-secondary mb-3" @onclick="AddOrderItem">+ Add Item</button>

    <div class="mb-4">
        <strong>Total Amount:</strong>
        <span class="ms-2 fw-bold text-primary">@order.TotalAmount:C</span>
    </div>

    <div class="text-center">
        <button type="submit" class="btn btn-primary px-4">Submit Order</button>
    </div>
</EditForm>


@code {
    private OrderDto order = new()
    {
        Id = 1,
        CustomerPhone = "",
        VendorId = 1,
        CreatedAt = DateTime.Now,
        Status = OrderStatus.Pending,
        OrderItems = new List<OrderItemDto>
        {
            new OrderItemDto
            {
                Id = 1,
                OrderId = 1,
                ServiceId = 101,
                QuantityKg = 1.0,
                UnitPrice = 10.0m
            }
        }
    };

    private bool isCustomerRole = false;

    private string CustomerPhoneString
    {
        get => order.CustomerPhone ?? "";
        set => order.CustomerPhone = value;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isCustomerRole = user.IsInRole("Customer");

        if (user.Identity?.IsAuthenticated == true && isCustomerRole)
        {
            // Common claim types for phone numbers: "phone_number", "phone"
            var phoneClaim = user.FindFirst(c => c.Type == "phone_number" || c.Type == "phone")?.Value;

            if (!string.IsNullOrWhiteSpace(phoneClaim))
            {
                order.CustomerPhone = phoneClaim;
            }
        }
    }

    private void AddOrderItem()
    {
        order.OrderItems.Add(new OrderItemDto
        {
            Id = order.OrderItems.Count + 1,
            OrderId = order.Id,
            ServiceId = 0,
            QuantityKg = 1.0,
            UnitPrice = 0.0m
        });
    }

    private void RemoveOrderItem(OrderItemDto item)
    {
        order.OrderItems.Remove(item);
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine($"Order submitted. Customer Phone: {order.CustomerPhone}");
        // TODO: Save logic here
    }
}
