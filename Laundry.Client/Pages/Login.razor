@page "/login"
@using Laundry.Shared.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
        @(isSubmitting ? "Logging in..." : "Login")
    </button>
</EditForm>

@code {
    private LoginDto loginModel = new();
    private string? ErrorMessage;
    private bool isSubmitting = false;
    private string? SuccessMessage;

    private async Task HandleLogin()
    {
        ErrorMessage = null;
        isSubmitting = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result is not null)
                {
                    // Optionally store token in local storage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    ((ApiAuthenticationStateProvider)AuthenticationStateProvider).NotifyUserAuthentication(result.Token);

                    // Optionally store user info if needed
                    await JS.InvokeVoidAsync("localStorage.setItem", "userEmail", result.User.Email);
                    await JS.InvokeVoidAsync("localStorage.setItem", "userRole", result.User.Role.ToString());
                    if (result.User.VendorId.HasValue)
                    {
                        await JS.InvokeVoidAsync("localStorage.setItem", "vendorID", result.User.VendorId.Value.ToString());
                    }
                    SuccessMessage = $"Welcome back, {result.User.FullName}!";

                    switch (result.User.Role.ToString())
                    {
                        case "Admin":
                            Navigation.NavigateTo("/");

                            //Navigation.NavigateTo("/admin/dashboard");
                            break;
                        case "Vendor":
                            Navigation.NavigateTo("/");

                            //Navigation.NavigateTo("/vendor/home");
                            break;
                        default:
                            Navigation.NavigateTo("/");
                            break;
                    }
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Login failed: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
