@page "/login"
@using Laundry.Shared.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow-sm p-4" style="width: 100%; max-width: 400px;">
        <h3 class="text-center text-primary mb-4">Sign In</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @SuccessMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email Address</label>
                <InputText id="email" class="form-control" placeholder="Enter your email" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" placeholder="Enter your password" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                @(isSubmitting ? "Logging in..." : "Login")
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            <small class="text-muted">
                Don't have an account?
                <a href="/register" class="text-decoration-none">Register</a>
            </small>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private string? ErrorMessage;
    private string? SuccessMessage;
    private bool isSubmitting = false;

    private async Task HandleLogin()
    {
        // Clear previous messages
        ErrorMessage = null;
        SuccessMessage = null;
        isSubmitting = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result is not null)
                {
                    // Store auth token and user info in local storage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    await JS.InvokeVoidAsync("localStorage.setItem", "userEmail", result.User.Email);
                    await JS.InvokeVoidAsync("localStorage.setItem", "userRole", result.User.Role.ToString());
                    if (result.User.VendorId.HasValue)
                    {
                        await JS.InvokeVoidAsync("localStorage.setItem", "vendorID", result.User.VendorId.Value.ToString());
                    }

                    // Notify the app about the authenticated user
                    if (AuthenticationStateProvider is ApiAuthenticationStateProvider apiAuthProvider)
                    {
                        apiAuthProvider.NotifyUserAuthentication(result.Token);
                    }

                    SuccessMessage = $"Welcome back, {result.User.FullName}!";

                    // Redirect based on user role
                    NavigateToRoleBasedPage(result.User);
                }
                else
                {
                    ErrorMessage = "Login failed: Invalid response from server.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Login failed: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void NavigateToRoleBasedPage(UserDto user)
    {
        switch (user.Role.ToString())
        {
            case "SuperAdmin":
                Navigation.NavigateTo("/");
                break;
            case "VendorAdmin":
                Navigation.NavigateTo("/order");
                break;
            case "Employee":
                if (user.VendorId.HasValue)
                {
                    Navigation.NavigateTo($"/order/{user.VendorId.Value}");
                }
                else
                {
                    Navigation.NavigateTo("/order");
                }
                break;
            default:
                Navigation.NavigateTo("/");
                break;
        }
    }
}
