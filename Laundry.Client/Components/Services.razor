@page "/services"
@inject IServiceService ServiceService
@using Laundry.Shared
@using Laundry.Shared.DTOs
@using System.Net.Http.Json

<h3 class="mb-4">Manage Services</h3>

@if (canEdit)
{
    <!-- Add/Edit Form -->
    <EditForm Model="@editingService" OnValidSubmit="@SaveService">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3 mb-3">
            <div class="col-md-6">
                <label>Name</label>
                <InputText @bind-Value="editingService.Name" class="form-control" />
            </div>

            <!-- Hidden VendorId: -->
            <input type="hidden" @bind="editingService.VendorId" />

            <div class="col-md-6">
                <label>Price</label>
                <InputNumber @bind-Value="editingService.Price" class="form-control" />
            </div>

            <div class="col-md-6">
                <label for="unitSelect" class="form-label">Unit</label>
                <InputSelect id="unitSelect" @bind-Value="editingService.Unit" class="form-select">
                    <option value="" disabled selected hidden>Select Unit</option>
                    @foreach (var unit in Enum.GetValues(typeof(Shared.Enums.ServiceUnit)).Cast<Enum>())
                    {
                        <option value="@unit">@unit.GetDisplayName()</option>
                    }
                </InputSelect>

            </div>


            <div class="col-md-12">
                <label>Description</label>
                <InputTextArea @bind-Value="editingService.Description" class="form-control" rows="3" />
            </div>

            <div class="col-md-12 text-end">
                <button type="submit" class="btn btn-primary me-2">@((editingService.Id == 0) ? "Add" : "Update")</button>
                <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
            </div>
        </div>
    </EditForm>

    <hr />
}

<!-- List -->
<table class="table table-bordered mt-3">
    <thead class="table-light">
        <tr>
            <th>S.No</th>
            <th>Id</th>

            <th>Name</th>
            <!-- Vendor ID column hidden -->
            <th>Price</th>
            <th>Unit</th>
            <th>Description</th>
            <th class="text-end">Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (services?.Count > 0)
        {
            @foreach (var service in services.Select((s, index) => new { Service = s, Index = index + 1 }))
            {
                <tr>
                    <td>@service.Index</td> <!-- S.No -->
                    <td>@service.Service.Id</td>
                    <td>@service.Service.Name</td>
                    <!-- VendorId hidden from UI -->
                    <td>@service.Service.Price</td>
                    <td>@service.Service.Unit</td>
                    <td>@service.Service.Description</td>
                    <td class="text-end">
                        @if (canEdit)
                        {
                            <button class="btn btn-sm btn-warning me-2" @onclick="() => EditService(service.Service)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick=" async () => await DeleteService(service.Service.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">No services available.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ServiceDto> services = new();
    private ServiceDto editingService = new();
    private ClaimsPrincipal? currentUser;
    private bool isEmployeeRole;
    private bool isVendorAdminRole;
    private bool canEdit => isEmployeeRole || isVendorAdminRole;
    
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;

        isEmployeeRole = currentUser.IsInRole("Employee");
        isVendorAdminRole = currentUser.IsInRole("VendorAdmin");

        await LoadServices(currentUser);
        ResetForm();
    }

    private int? GetVendorIdFromClaims(ClaimsPrincipal user) =>
        int.TryParse(user.FindFirst("vendorId")?.Value, out var id) ? id : null;

    private async Task LoadServices(ClaimsPrincipal user)
    {
        var vendorId = GetVendorIdFromClaims(user);
        if (vendorId.HasValue)
        {
            services = await ServiceService.GetByVendorIdAsync(vendorId.Value);
        }
        else
        {
            services = new();
        }
    }

    private void EditService(ServiceDto service)
    {
        editingService = new ServiceDto
        {
            Id = service.Id,
            Name = service.Name,
            Description = service.Description,
            Price = service.Price,
            Unit = service.Unit,
            VendorId = service.VendorId
        };
    }

    private async Task SaveService()
    {
        if (!canEdit)
            return; // extra safeguard

        if (editingService.Id == 0)
        {
            await ServiceService.CreateAsync(editingService);
        }
        else
        {
            await ServiceService.UpdateAsync(editingService.Id, editingService);
        }

        if (currentUser is not null)
        {
            await LoadServices(currentUser);
        }

        ResetForm();
    }

    private async Task DeleteService(int id)
    {
        if (!canEdit)
            return; // extra safeguard

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete service {id}?");
        if (confirmed)
        {
            await ServiceService.DeleteAsync(id);
            if (currentUser is not null)
            {
                await LoadServices(currentUser);
            }
        }
    }

    private void ResetForm()
    {
        editingService = new ServiceDto();

        if (currentUser is not null)
        {
            var vendorId = GetVendorIdFromClaims(currentUser);
            if (vendorId.HasValue)
                editingService.VendorId = vendorId.Value;
        }
    }
}
